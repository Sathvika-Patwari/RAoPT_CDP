# ------------------------------------------------------------------------------
#  Author: Erik Buchholz
#  E-mail: e.buchholz@unsw.edu.au
# ------------------------------------------------------------------------------
import logging
from unittest import TestCase

import numpy as np
from haversine import haversine_vector, Unit

from raopt.preprocessing import coordinates, tdrive
from raopt.dp import sdd
from raopt.utils.config import Config
from raopt.utils.helpers import get_latlon_arrays

logging.basicConfig(level=logging.ERROR)


class Test(TestCase):
    def test_add_laplace_to_value(self):
        v = 5
        self.assertNotEqual(v, sdd.add_laplace_to_value(v, 1, 0))
        v = [1, 2, 3, 4, 5]
        v_n = sdd.add_laplace_to_value(v, 1, 0)
        for i in range(len(v)):
            self.assertNotEqual(v[i], v_n[i])

    def test_angle_between(self):
        self.assertEqual(
            np.pi / 2, sdd.angle_between((1, 0, 0), (0, 1, 0)))
        self.assertEqual(0, sdd.angle_between((1, 0, 0), (1, 0, 0)))
        self.assertEqual(np.pi, sdd.angle_between((1, 0, 0), (-1, 0, 0)))
        self.assertAlmostEqual(
            0.9272952180016124, sdd.angle_between((1, 3), (3, 1)))

    def test_compute_c(self):
        self.assertAlmostEqual(
            1. / 0.9400247793,
            sdd._compute_C(0, 1, 1)
        )
        self.assertAlmostEqual(
            1. / 0.8295689561,
            sdd._compute_C(2, 1, 1)
        )
        for (e, a, B, s) in [
            (0.1, 0.1, 7, 0.143726561),
            (0.1, 1, 9, 0.111669139),
            (0.1, 2, 8, 0.125488764),
            (0.1, 3, 1, 1.03173669),
            (0.1, 4, 2, 0.509460126),
            (0.1, 0.01, 5, 0.201247583),
            (0.1, 10, 7, 0.144524026),
            (0.1, -1, -2, -0.499996745),
            (10, 0.1, -5, -0.097909197),
            (10, 1, 8, 0.192973509),
            (10, 2, 2, 0.875969449),
            (10, 3, 3, 0.583979633),
            (10, 4, 7, 0.193006952),
            (10, 0.01, 8, 0.218651201),
            (10, 10, 99, 0.015911031),
            (10, -1, 2, -28.93394708),
            (1, 0.1, 0.8, 1.311819699),
            (1, 1, 8, 0.13118197),
            (1, 2, 9, 0.115701042),
            (1, 3, 5, 0.206565325),
            (1, 4, 87, 0.012160933),
            (1, 0.01, 0.5, 2.122403732),
            (1, 10, 0.9, 4.183291796),
            (1, -1, 0.8, 2.054786815),
            (1, -5, 7, 0.179488176),
            (1, 8, 36, 0.028925261),
        ]:
            self.assertAlmostEqual(
                s,
                sdd._compute_C(a, B, e)
            )

    def test_pdf(self):
        a = np.pi / 4
        B = 2 * np.pi
        eps = 0.5
        C = sdd._compute_C(a, B, eps)
        goal = [0.16179668574314707, 0.16181278075757907, 0.16182887737309143, 0.16184497558984334, 0.16186107540799416,
                0.16187717682770314, 0.16189327984912963, 0.16190938447243294, 0.16192549069777243, 0.16194159852530748,
                0.16195770795519746, 0.16197381898760174, 0.16198993162267977, 0.16200604586059097, 0.16202216170149478,
                0.16203827914555066, 0.16205439819291811, 0.16207051884375656, 0.16208664109822557, 0.16210276495648468,
                0.16211889041869337, 0.16213501748501125, 0.16215114615559786, 0.1621672764306128, 0.16218340831021566,
                0.16219954179456608, 0.16221567688382368, 0.16223181357814812, 0.16224795187769905, 0.16226409178263618,
                0.1622802332931192, 0.16229637640930783, 0.16231252113136177, 0.16232866745944077, 0.16234481539370463,
                0.1623609649343131, 0.162377116081426, 0.16239326883520305, 0.16240942319580423, 0.16242557916338926,
                0.16244173673811804, 0.16245789592015042, 0.16247405670964632, 0.16249021910676564, 0.1625063831116683,
                0.16252254872451422, 0.16253871594546337, 0.1625548847746757, 0.16257105521231124, 0.16258722725852992,
                0.16260340091349182, 0.16261957617735695, 0.16263575305028535, 0.1626519315324371, 0.16266811162397224,
                0.16268429332505094, 0.16270047663583323, 0.16271666155647932, 0.16273284808714927, 0.16274903622800332,
                0.16276522597920157, 0.16278141734090426, 0.1627976103132716, 0.16281380489646383, 0.1628300010906411,
                0.1628461988959638, 0.16286239831259208, 0.1628785993406863, 0.1628948019804067, 0.16291100623191368,
                0.1629272120953675, 0.16294341957092856, 0.16295962865875724, 0.16297583935901386, 0.16299205167185887,
                0.16300826559745268, 0.1630244811359557, 0.16304069828752837, 0.1630569170523312, 0.1630582086653832,
                0.16304198977210765, 0.163025772492075, 0.1630095568251248, 0.16299334277109662, 0.16297713032982997,
                0.16296091950116448, 0.16294471028493973, 0.16292850268099535, 0.16291229668917098, 0.16289609230930624,
                0.1628798895412408, 0.16286368838481435, 0.1628474888398666, 0.1628312909062372, 0.16281509458376597,
                0.1627988998722926, 0.16278270677165682, 0.16276651528169844, 0.16275032540225726, 0.16273413713317308,
                0.1627179504742857, 0.162701765425435, 0.16268558198646077, 0.16266940015720294, 0.1626532199375014,
                0.162637041327196, 0.16262086432612669, 0.1626046889341334, 0.16258851515105613, 0.16257234297673476,
                0.1625561724110093, 0.1625400034537198, 0.1625238361047062, 0.16250767036380856, 0.16249150623086694,
                0.1624753437057214, 0.16245918278821198, 0.16244302347817882, 0.16242686577546203, 0.16241070967990168,
                0.16239455519133794, 0.162378402309611, 0.162362251034561, 0.16234610136602814, 0.1623299533038526,
                0.16231380684787466, 0.1622976619979345, 0.16228151875387237, 0.16226537711552858, 0.16224923708274339,
                0.1622330986553571, 0.16221696183321, 0.1622008266161425, 0.16218469300399485, 0.16216856099660748,
                0.16215243059382076, 0.16213630179547509, 0.16212017460141082, 0.16210404901146847, 0.16208792502548844,
                0.16207180264331114, 0.16205568186477712, 0.16203956268972686, 0.16202344511800082, 0.16200732914943955,
                0.1619912147838836, 0.16197510202117352, 0.16195899086114984, 0.16194288130365322, 0.1619267733485242,
                0.16191066699560341, 0.1618945622447315, 0.16187845909574913, 0.1618623575484969, 0.16184625760281557,
                0.1618301592585458, 0.1618140625155283, 0.1617979673736038, 0.16178187383261305, 0.16176578189239682,
                0.16174969155279587, 0.16173360281365098, 0.161717515674803, 0.1617014301360927, 0.16168534619736094,
                0.1616692638584486, 0.16165318311919652, 0.1616371039794456, 0.16162102643903678, 0.1616049504978109,
                0.16158887615560893, 0.16157280341227184, 0.16155673226764058, 0.16154066272155612, 0.1615245947738595,
                0.16150852842439167, 0.1614924636729937, 0.16147640051950662, 0.16146033896377152, 0.16144427900562944,
                0.1614282206449215, 0.16141216388148877, 0.1613961087151724, 0.16138005514581352, 0.16136400317325333,
                0.16134795279733294, 0.16133190401789357, 0.16131585683477642, 0.1612998112478227, 0.16128376725687366,
                0.16126772486177052, 0.16125168406235457, 0.16123564485846711, 0.1612196072499494, 0.16120357123664275,
                0.16118753681838852, 0.16117150399502805, 0.1611554727664027, 0.16113944313235382, 0.16112341509272285,
                0.16110738864735114, 0.16109136379608016, 0.16107534053875133, 0.16105931887520614, 0.161043298805286,
                0.16102728032883243, 0.16101126344568695, 0.16099524815569105, 0.16097923445868628, 0.16096322235451416,
                0.16094721184301633, 0.1609312029240343, 0.16091519559740966, 0.16089918986298407, 0.16088318572059915,
                0.16086718317009654, 0.1608511822113179, 0.1608351828441049, 0.1608191850682992, 0.1608031888837426,
                0.1607871942902767, 0.16077120128774336, 0.16075520987598427, 0.1607392200548412, 0.16072323182415596,
                0.16070724518377033, 0.16069126013352614, 0.1606752766732652, 0.16065929480282942, 0.1606433145220606,
                0.16062733583080063, 0.16061135872889146, 0.16059538321617495, 0.16057940929249304, 0.16056343695768766,
                0.1605474662116008, 0.1605314970540744, 0.16051552948495051, 0.16049956350407107, 0.16048359911127816,
                0.16046763630641375, 0.16045167508931996, 0.1604357154598388, 0.16041975741781242, 0.16040380096308288,
                0.16038784609549228, 0.1603718928148828, 0.16035594112109655, 0.16033999101397572, 0.16032404249336246,
                0.160308095559099, 0.16029215021102752, 0.16027620644899027, 0.16026026427282947, 0.16024432368238742,
                0.1602283846775063, 0.16021244725802852, 0.1601965114237963, 0.160180577174652, 0.16016464451043794,
                0.16014871343099646, 0.16013278393616995, 0.16011685602580078, 0.16010092969973136, 0.16008500495780412,
                0.16006908179986143, 0.1600531602257458, 0.16003724023529967, 0.1600213218283655, 0.16000540500478583,
                0.1599894897644031, 0.1599735761070599, 0.1599576640325987, 0.15994175354086212, 0.1599258446316927,
                0.15990993730493308, 0.15989403156042575, 0.15987812739801344, 0.15986222481753873, 0.15984632381884428,
                0.15983042440177272, 0.1598145265661668, 0.1597986303118692, 0.15978273563872256, 0.1597668425465697,
                0.15975095103525333, 0.15973506110461616, 0.15971917275450107, 0.15970328598475073, 0.15968740079520805,
                0.1596715171857158, 0.1596556351561168, 0.15963975470625394, 0.15962387583597007, 0.1596079985451081,
                0.15959212283351087, 0.15957624870102138, 0.1595603761474825, 0.1595445051727372, 0.1595286357766284,
                0.15951276795899916, 0.15949690171969239, 0.15948103705855116, 0.15946517397541846, 0.15944931247013733,
                0.15943345254255087, 0.1594175941925021, 0.15940173741983413, 0.15938588222439004, 0.159370028606013,
                0.15935417656454606, 0.15933832609983248, 0.15932247721171533, 0.15930662990003783, 0.1592907841646432,
                0.1592749400053746, 0.15925909742207528, 0.1592432564145885, 0.1592274169827575, 0.15921157912642556,
                0.15919574284543597, 0.15917990813963204, 0.15916407500885707, 0.15914824345295442, 0.15913241347176746,
                0.1591165850651395, 0.15910075823291397, 0.15908493297493426, 0.1590691092910438, 0.15905328718108594,
                0.15903746664490426, 0.1590216476823421, 0.159005830293243, 0.15899001447745043, 0.1589742002348079,
                0.15895838756515895, 0.1589425764683471, 0.15892676694421595, 0.15891095899260899, 0.15889515261336987,
                0.15887934780634216, 0.15886354457136947, 0.1588477429082955, 0.15883194281696383, 0.15881614429721813,
                0.1588003473489021, 0.15878455197185942, 0.15876875816593383, 0.158752965930969, 0.15873717526680872,
                0.15872138617329673, 0.15870559865027678, 0.15868981269759272, 0.15867402831508828, 0.15865824550260735,
                0.1586424642599937, 0.15862668458709123, 0.1586109064837438, 0.15859512994979522, 0.15857935498508946,
                0.15856358158947043, 0.15854780976278204, 0.15853203950486827, 0.15851627081557298, 0.15850050369474025,
                0.15848473814221403, 0.1584689741578383, 0.15845321174145713, 0.15843745089291453, 0.15842169161205455,
                0.15840593389872124, 0.15839017775275874, 0.1583744231740111, 0.15835867016232244, 0.1583429187175369,
                0.15832716883949863, 0.15831142052805178, 0.15829567378304052, 0.15827992860430903, 0.15826418499170156,
                0.15824844294506232, 0.15823270246423554, 0.15821696354906545, 0.15820122619939633, 0.15818549041507252,
                0.1581697561959382, 0.15815402354183783, 0.15813829245261563, 0.158122562928116, 0.1581068349681833,
                0.1580911085726619, 0.15807538374139615, 0.15805966047423053, 0.15804393877100942, 0.1580282186315773,
                0.15801250005577858, 0.1579967830434577, 0.15798106759445926, 0.15796535370862766, 0.15794964138580744,
                0.15793393062584316, 0.1579182214285793, 0.15790251379386053, 0.15788680772153135, 0.15787110321143638,
                0.15785540026342024, 0.15783969887732752, 0.15782399905300287, 0.15780830079029096, 0.15779260408903645,
                0.15777690894908405, 0.15776121537027843, 0.15774552335246433, 0.15772983289548648, 0.15771414399918962,
                0.15769845666341853, 0.15768277088801794, 0.15766708667283272, 0.15765140401770764, 0.15763572292248748,
                0.15762004338701718, 0.15760436541114153, 0.1575886889947054, 0.15757301413755373, 0.15755734083953138,
                0.15754166910048326, 0.15752599892025432, 0.15751033029868952, 0.1574946632356338, 0.15747899773093216,
                0.1574633337844296, 0.1574476713959711, 0.1574320105654017, 0.15741635129256648, 0.15740069357731046,
                0.15738503741947868, 0.1573693828189163, 0.15735372977546835, 0.15733807828898003, 0.1573224283592964,
                0.15730677998626266, 0.15729113316972396, 0.15727548790952545, 0.15725984420551237, 0.1572442020575299,
                0.15722856146542327, 0.15721292242903775, 0.15719728494821855, 0.157181649022811, 0.15716601465266036,
                0.1571503818376119, 0.157134750577511, 0.15711912087220295, 0.15710349272153312, 0.1570878661253469,
                0.15707224108348958, 0.15705661759580664, 0.15704099566214347, 0.15702537528234548, 0.15700975645625814,
                0.1569941391837269, 0.1569785234645972, 0.15696290929871456, 0.1569472966859245, 0.1569316856260725,
                0.15691607611900407, 0.15690046816456485, 0.15688486176260033, 0.1568692569129561, 0.1568536536154778,
                0.15683805187001099, 0.15682245167640133, 0.15680685303449446, 0.15679125594413598, 0.15677566040517163,
                0.15676006641744708, 0.156744473980808, 0.15672888309510016, 0.15671329376016926, 0.15669770597586108,
                0.15668211974202134, 0.15666653505849584, 0.1566509519251304, 0.15663537034177077, 0.15661979030826284,
                0.15660421182445242, 0.15658863489018537, 0.1565730595053076, 0.1565574856696649, 0.15654191338310325,
                0.15652634264546855, 0.15651077345660674, 0.15649520581636378, 0.15647963972458556, 0.15646407518111816,
                0.15644851218580752, 0.15643295073849967, 0.1564173908390406, 0.15640183248727638, 0.15638627568305305,
                0.15637072042621672, 0.15635516671661343, 0.1563396145540893, 0.15632406393849044, 0.15630851486966296,
                0.15629296734745307, 0.1562774213717069, 0.1562618769422706, 0.15624633405899038, 0.1562307927217125,
                0.1562152529302831, 0.15619971468454846, 0.15618417798435488, 0.15616864282954854, 0.15615310921997577,
                0.1561375771554829, 0.15612204663591622, 0.15610651766112202, 0.1560909902309467, 0.1560754643452366,
                0.1560599400038381, 0.15604441720659762, 0.15602889595336153, 0.15601337624397624, 0.15599785807828823,
                0.15598234145614392, 0.1559668263773898, 0.15595131284187236, 0.15593580084943806, 0.15592029039993346,
                0.15590478149320508, 0.15588927412909945, 0.15587376830746313, 0.15585826402814268, 0.15584276129098473,
                0.15582726009583586, 0.15581176044254272, 0.1557962623309519, 0.15578076576091007, 0.15576527073226393,
                0.1557497772448601, 0.15573428529854536, 0.15571879489316634, 0.1557033060285698, 0.15568781870460252,
                0.1556723329211112, 0.15565684867794263, 0.15564136597494363, 0.15562588481196096, 0.15561040518884148,
                0.155594927105432, 0.15557945056157937, 0.15556397555713045, 0.15554850209193213, 0.15553303016583134,
                0.15551755977867493, 0.15550209093030984, 0.15548662362058305, 0.15547115784934148, 0.1554556936164321,
                0.15544023092170195, 0.15542476976499794, 0.15540931014616718, 0.15539385206505663, 0.1553783955215134,
                0.1553629405153845, 0.15534748704651702, 0.15533203511475807, 0.15531658471995477, 0.1553011358619542,
                0.15528568854060354, 0.15527024275574994, 0.15525479850724053, 0.15523935579492254, 0.15522391461864313,
                0.15520847497824958, 0.15519303687358907, 0.1551776003045088, 0.15516216527085613, 0.15514673177247829,
                0.15513129980922255, 0.15511586938093627, 0.1551004404874667, 0.15508501312866124, 0.1550695873043672,
                0.15505416301443195, 0.1550387402587029, 0.15502331903702746, 0.155007899349253, 0.15499248119522693,
                0.15497706457479676, 0.1549616494878099, 0.15494623593411386, 0.1549308239135561, 0.15491541342598408,
                0.1549000044712454, 0.15488459704918758, 0.15486919115965814, 0.15485378680250464, 0.15483838397757468]
        x = np.arange(0, 6, 0.01)
        np.testing.assert_array_almost_equal(goal, sdd.get_exp_pdf(C, a, B, eps)(x))

    def test_exponential_mechanism(self):
        a = np.pi / 4
        b = 2 * np.pi
        cf = sdd.exponential_mechanism(a, b, 1)
        self.assertEqual(
            (0, b),
            cf.support()
        )
        # self.assertAlmostEqual(
        #     1.,
        #     quad(cf.pdf, 0, b)[0]
        # )

    def test_unit_vector(self):
        self.assertTrue(
            ((1, 0, 0) ==
             sdd.unit_vector((3, 0, 0))).all()
        )
        self.assertTrue(
            ((0, 1, 0) ==
             sdd.unit_vector((0, 25, 0))).all()
        )
        self.assertTrue(
            ((0, 0, 1) ==
             sdd.unit_vector((0, 0, 5))).all()
        )
        self.assertTrue(
            ((1 / np.sqrt(2), 1 / np.sqrt(2), 0) ==
             sdd.unit_vector((1, 1, 0))).all()
        )
        self.assertEqual(
            [1 / np.sqrt(2), 0., 1 / np.sqrt(2)],
            list(sdd.unit_vector((1, 0, 1)))
        )
        self.assertEqual(
            [1 / np.sqrt(3), 1 / np.sqrt(3), 1 / np.sqrt(3)],
            list(sdd.unit_vector((1, 1, 1)))
        )

    def test_conversion_coord_meter_jiang(self):
        latitudes = [
            1, 1, 89.9, 90, 45, 45, 89.9, 8, 9
        ]
        longitudes = [
            1, 2, 3, 180, -180, 6, 90, -90, 9
        ]
        latitudes, longitudes = np.array(latitudes), np.array(longitudes)
        with self.assertRaises(DeprecationWarning):
            coordinates.revert_conversion_jiang(
                *coordinates.convert_coord_to_meter_jiang(latitudes, longitudes))
        return  # Deprecated
        for i in range(len(latitudes)):
            self.assertAlmostEqual(
                latitudes[i],
                lat[i]
            )
            self.assertAlmostEqual(
                longitudes[i],
                lon[i]
            )
        t1 = tdrive._read_tdrive_file(Config.get_test_dir() + 'resources/simple.csv')
        res_la, res_lo = coordinates.revert_conversion_jiang(
            *coordinates.convert_coord_to_meter_jiang(*get_latlon_arrays(t1)))
        for i in range(len(t1)):
            self.assertAlmostEqual(
                t1.at[i, 'latitude'],
                res_la[i]
            )
            self.assertAlmostEqual(
                t1.at[i, 'longitude'],
                res_lo[i]
            )

    def test_utm(self):
        latitudes = np.array([
            40, 41, 42, 43, 44, 45, 46, 47, 48
        ])
        longitudes = np.array([
            115, 116, 117, 118, 119, 120, 121, 122, 123
        ])
        # Test back conversion
        la, lo = coordinates.from_utm(
            *coordinates.to_utm(latitudes, longitudes))
        for i, _ in enumerate(latitudes):
            self.assertAlmostEqual(
                latitudes[i],
                la[i], 4
            )
            self.assertAlmostEqual(
                longitudes[i],
                lo[i],
                4
            )

    def test_to_offset_coords(self):
        latitudes = np.array([
            39.9,
            39.89955084,
            39.89910168,
            39.89910168,
            39.89865253])
        longitudes = np.array([
            116.3972306,
            116.397816,
            116.397816,
            116.3966451,
            116.3966451
        ])
        res_y = np.array([
            0,
            - 50,
            - 100,
            - 100,
            - 150,
        ])
        res_x = np.array([
            0,
            50,
            50,
            -50,
            -50,
        ])
        x, y = coordinates.to_offset_coords(
            latitudes, longitudes, lat0=39.9, lon0=(116 + 23 / 60 + 50.03 / 3600))
        for i, _ in enumerate(res_x):
            self.assertAlmostEqual(
                res_x[i],
                x[i],
                2
            )
            self.assertAlmostEqual(
                res_y[i],
                y[i],
                2
            )

    def test_from_offset_coords(self):
        longitudes = np.array([39.9,
                               39.89955084,
                               39.89910168,
                               39.89910168,
                               39.89865253])
        latitudes = np.array([
            116.3972306,
            116.397816,
            116.397816,
            116.3966451,
            116.3966451
        ])
        y = np.array([
            0,
            - 50,
            - 100,
            - 100,
            - 150,
        ])
        x = np.array([
            0,
            50,
            50,
            -50,
            -50,
        ])
        lon, lat = coordinates.from_offset_coords(
            x, y, lat0=39.9, lon0=(116 + 23 / 60 + 50.03 / 3600))
        for i, _ in enumerate(lon):
            self.assertAlmostEqual(
                longitudes[i],
                lon[i],
                2
            )
            self.assertAlmostEqual(
                latitudes[i],
                lat[i],
                2
            )

    def test_offset_coords(self):
        # Check back-conversion
        lon = np.random.random(10) * 360 - 180
        lat = np.random.random(10) * 180 - 90
        res_lat, res_lon = coordinates.from_offset_coords(
            *coordinates.to_offset_coords(
                lat, lon, 40, 100
            ), 40, 100
        )
        for i, r in enumerate(lon):
            self.assertAlmostEqual(
                r,
                res_lon[i]
            )
            self.assertAlmostEqual(
                lat[i],
                res_lat[i]
            )
        lon = [
            0,
            180,
            -180,
            90,
            -90,
            45,
            -44,
            30
        ]
        lat = [
            90,
            45,
            30,
            12,
            0,
            -90,
            -45,
            -1
        ]
        lon, lat = np.array(lon), np.array(lat)
        res_lat, res_lon = coordinates.from_offset_coords(
            *coordinates.to_offset_coords(
                lat, lon, 40, 100
            ), 40, 100
        )
        for i, r in enumerate(lon):
            self.assertAlmostEqual(
                r,
                res_lon[i]
            )
            self.assertAlmostEqual(
                lat[i],
                res_lat[i]
            )

    def test_offset_distances(self):
        center_la = 40
        center_lo = 115
        thick = 10
        error_rate = thick / 100
        lon1 = np.random.random(100) * thick + center_lo - thick / 2
        lat1 = np.random.random(100) * thick + center_la - thick / 2
        a = np.column_stack((lat1, lon1))
        lon2 = np.random.random(100) * thick + center_lo - thick / 2
        lat2 = np.random.random(100) * thick + center_la - thick / 2
        b = np.column_stack((lat2, lon2))
        x1, y1 = coordinates.to_offset_coords(
            lat1, lon1, center_la, center_lo
        )
        x2, y2 = coordinates.to_offset_coords(
            lat2, lon2, center_la, center_lo
        )
        p1 = np.column_stack((x1, y1))
        p2 = np.column_stack((x2, y2))
        r = p2 - p1
        res = np.linalg.norm(r, axis=1)
        distances = haversine_vector(a, b, unit=Unit.METERS)
        # Allow for x% error
        for i, d in enumerate(distances):
            self.assertGreaterEqual(
                error_rate,
                abs(d - res[i]) / d
            )
